Setting up dev environment with Virtual Box
===========================================


Offline network config
----------------------

Set up pfSense VM with 2 network adapters with adapter 1 with NAT and DHCP inside of pfSense (often with IP 10.0.2.2) and adapter 2 with Internal network pfSense-intnet and static IP address inside (like 192.168.10.1)

Configure daloRADIUS VM with Internal network pfSense-intnet and use static IP inside (e.g. 192.168.10.2)

Any additional VM can be set up as client(s) connected to the Internal network pfSense-intnet with DHCP. As long as they have different MAC addresses, they are seen as different systems inside the pfSense-intnet network.


'Remote' access to guests
-------------------------

To access pfense 'at the edge' directly from your host enable its remote SSH and HTTP access. Afterwards configure port forwarding for adapter 1 of pfSense guest and use localhost to access pfSense with ssh -p 2222 root@localhost and http://localhost:8888
VBoxManage modifyvm "pfSense 2.2" --natpf1 "pfsensessh,tcp,,2222,,22"
VBoxManage modifyvm "pfSense 2.2" --natpf1 "pfsensehttp,tcp,,8888,,80"
VBoxManage modifyvm "pfSense 2.2" --natpf1 "radiusssh,tcp,,3333,,3333"
VBoxManage modifyvm "pfSense 2.2" --natpf1 "radiushttp,tcp,,9999,,9999"
#VBoxManage modifyvm "pfSense" --natpf1 delete "pfsensessh"

Configure NAT within pfSense to pass through access to (internal) daloRADIUS by adding 2 NAT entries taking port 3333 and 9999 to RADIUS host 192.168.10.2 with ports 22 and 80. Make sure that these rules are above any potential 'allow all' rules, as elsewise they won't be evaluated.

Make sure that the daloRADIUS host can pass through the Captive Portal without authentication by adding ts MAC address to Captive Portal list of allowed MAC addresses.

Block private (& bogus?) networks on WAN interface of pfSense needs to be deactivated.

Afterwards access pfSense (ssh -p 2222 root@localhost, http://localhost:8888) and daloRADIUS (ssh -p 3333 root@localhost, http://localhost:9999) right from your host.


Time
----

Time in VMs can quickly go wrong, mostly when VMs are suspended. Using NTP within the VMs requires an Internet connection and it may not sync immidiately if the time difference is too big.

Linux and FreeBSD VMs need to see the host hardware clock as UTC. Enable this VM setting with the System - Motherboard - Extended features option.

The Virtual Box Guest Addition contains a time syncing feature, but they are either overkill (too many features) or not available at all (e.g. on FreeBSD)

Activate SSHD on your host and configure passwordless access (by adding the public key to ~/.ssh/authorized_keys). Afterwards from the client VMs this manually 'syncs' the time from the host every 5 minutes:
On Linux guests: */5 * * * * date -s "`ssh xian@10.0.2.2 'date'`" >/dev/null
On FreeBSD guests: */5 * * * * /root/sync_time_with_host.sh
  with script 
  #!/bin/bash
  /bin/date `/usr/bin/ssh xian@10.0.2.2 'date "+%y%m%d%H%M"'`


Multiple clients
----------------

As many 'client VMs' as required can be set up. Simply ensure that they use different MAC addresses and that their network adapters are all connected to the 'Internal Network' of Virtual Box with the proper name.


Local testing of data volume/bundles
------------------------------------

Run a HTTP server on your hosts (e.g. any rails environment) and place a reasonable sized file into the public directory. Now from a pfSense Client system run somethink like 'wget http://10.0.2.2:3000/r.zip' to invoke a transfer through pfSense.

